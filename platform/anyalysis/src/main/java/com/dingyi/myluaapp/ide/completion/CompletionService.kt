package com.dingyi.myluaapp.ide.completion

import CompletionProcess
import com.dingyi.myluaapp.ide.completion.internal.CompletionResult
import com.dingyi.myluaapp.openapi.application.ApplicationManager
import com.dingyi.myluaapp.openapi.progress.ProgressManager
import com.intellij.util.Consumer


abstract class CompletionService {

    /**
     * Run all contributors until any of them returns false or the list is exhausted. If from parameter is not null, contributors
     * will be run starting from the next one after that.
     */
    fun getVariantsFromContributors(
        parameters: CompletionParameters,
       from: CompletionContributor?,
        consumer: Consumer<in CompletionResult>
    ) {
        getVariantsFromContributors(
            parameters,
            from,
            createMatcher(suggestPrefix(parameters)),
            consumer
        )
    }

    protected fun getVariantsFromContributors(
        parameters: CompletionParameters,
       from: CompletionContributor?,
        matcher: PrefixMatcher, consumer: Consumer<in CompletionResult>
    )  {
        val contributors =
            CompletionContributor.forParameters(parameters)
        for (i in contributors.indexOf(from) + 1 until contributors.size) {
            ProgressManager.checkCanceled()
            val contributor = contributors[i]
            val result = createResultSet(parameters, consumer, contributor, matcher)
            contributor.fillCompletionVariants(parameters, result)
            if (result.isStopped) {
                return
            }
        }
    }

    protected abstract fun createResultSet(
        parameters: CompletionParameters, consumer: Consumer<in CompletionResult>,
        contributor: CompletionContributor, matcher: PrefixMatcher
    ): CompletionResultSet

    protected abstract fun suggestPrefix(parameters: CompletionParameters): String


    protected abstract fun createMatcher(prefix: String): PrefixMatcher


    abstract val currentCompletion: CompletionProcess?

    /**
     * The main method that is invoked to collect all the completion variants
     * @param parameters Parameters specifying current completion environment
     * @param consumer The consumer of the completion variants. Pass an instance of [BatchConsumer] if you need to receive information
     * about item batches generated by each completion contributor.
     */
    fun performCompletion(
        parameters: CompletionParameters,
        consumer: Consumer<in CompletionResult>
    ) {



        val prefix = suggestPrefix(parameters)
        getVariantsFromContributors(parameters, null, createMatcher(prefix)) { }
       /* if (prefix.length > 2) {
            getVariantsFromContributors(
                parameters,
                null,
                createMatcher(prefix, true, Consumer {  })
            )
        }*/
    }



    companion object {

        val completionService: CompletionService
            get() = ApplicationManager.getApplication().get(CompletionService::class.java)



    }
}
